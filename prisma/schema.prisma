generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id        Int      @id @default(autoincrement())
  street    String
  number    String
  city      String
  state     String
  country   String
  companyId Int      @map("company_id")
  company   Company  @relation(fields: [companyId], references: [id])
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])

  @@unique([street, number, city, state, country, companyId])
  @@map("addresses")
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  password      String?
  name          String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  addresses     Address[]
  companies     CompanyUser[]
  roles         UserRole[]
  accounts      Account[]       // Relacionamento com contas externas (NextAuth)
  sessions      Session[]       // Relacionamento com sess√µes (NextAuth)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("users")
}

model Company {
  id        Int           @id @default(autoincrement())
  name      String
  logo      String?
  website_url String?
  addresses Address[]
  users     CompanyUser[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("companies")
}

model CompanyUser {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  company   Company  @relation(fields: [companyId], references: [id])
  companyId Int
  role      String   // Ex: "admin", "viewer"

  @@unique([userId, companyId])
  @@map("company_users")
}

model UserRole {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  role      String   // Ex: "admin", "moderator", etc.

  @@unique([userId, role])
  @@map("user_roles")
}

model Account {
  id                String   @id @default(cuid())
  userId            Int      @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       Int?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@map("verification_requests")
}
